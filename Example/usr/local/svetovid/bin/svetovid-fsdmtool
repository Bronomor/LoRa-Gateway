#!/usr/bin/env python3
#
# Copyright ##year## AVSystem <avsystem@avsystem.com>
# AVSystem SVD
# Version ##version##
# ALL RIGHTS RESERVED

import argparse
import os
import xml.etree.ElementTree

from fsdm import lwm2m_object_registry
from fsdm.generators import GENERATORS, ObjectDef


def fsdm_generate(args):
    if args.object:
        schema = lwm2m_object_registry.get_object_definition(args.object, args.object_version).encode('utf-8')
    else:
        with open(args.schema) as f:
            schema = f.read()

    if not schema:
        raise ValueError('Either object ID/URN or schema file path is required; use --help')

    etree = xml.etree.ElementTree.fromstring(schema)

    obj = ObjectDef.from_etree(etree.find('Object'))
    target_dir = os.path.join(args.output_dir, str(obj.oid))

    if os.path.exists(target_dir):
        raise ValueError('%s already exists, aborting' % (target_dir,))
    else:
        os.makedirs(target_dir)

    GENERATORS[args.generator].generate(obj, target_dir, args.fsdm_runtime_install_dir)
    print('Stubs generated to %s' % (target_dir,))


def main():
    parser = argparse.ArgumentParser(description='Resource stub generator')

    subparsers = parser.add_subparsers(dest='action')

    subparsers.add_parser('list', help='Download and display a list of available standard LwM2M objects')

    generate_parser = subparsers.add_parser('generate', help='Generate object/resource script stubs')

    generate_input_parser = generate_parser.add_mutually_exclusive_group(required=True)
    generate_input_parser.add_argument('-s', '--schema', type=str,
                                       help='Generate stubs based on XSD schema file')
    generate_input_parser.add_argument('-i', '--object', type=str, metavar='URN_OR_OID',
                                       help='Generate stubs for standard LwM2M Object with given ID')

    generate_parser.add_argument('-v', '--object-version', type=str,
                                 help='Explicitly choose version of an object if there exists more than one '
                                      'with the same ObjectID. Applicable only with --object argument. Without '
                                      '--object-version specified, most up to date version is chosen.')
    generate_parser.add_argument('-o', '--output-dir', type=str, default='/etc/svetovid/dm',
                                 help='Directory to store generated stubs in.')
    generate_parser.add_argument('-g', '--generator', type=str, default='python',
                                 help=('Generator to use. Available: ' + ' '.join(sorted(GENERATORS.keys()))))
    generate_parser.add_argument('-r', '--fsdm-runtime-install-dir', type=str, default='/usr/share/svetovid/lib/fsdm',
                                 help='Path to a directory where fsdm runtime libraries are stored.')

    args = parser.parse_args()
    action = {
        'list': lambda _args: lwm2m_object_registry._print_object_list(),
        'generate': fsdm_generate,
    }.get(args.action)

    if action:
        action(args)
    else:
        parser.print_help()


if __name__ == '__main__':
    main()
